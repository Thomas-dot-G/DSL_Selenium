/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncFunctionParserRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Assignment cBAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBBrowser_TaskParserRuleCall_1_0 = (RuleCall)cBAssignment_1.eContents().get(0);
		
		//Program:
		//	func+=Function* b=Browser_Task;
		@Override public ParserRule getRule() { return rule; }
		
		//func+=Function* b=Browser_Task
		public Group getGroup() { return cGroup; }
		
		//func+=Function*
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//Function
		public RuleCall getFuncFunctionParserRuleCall_0_0() { return cFuncFunctionParserRuleCall_0_0; }
		
		//b=Browser_Task
		public Assignment getBAssignment_1() { return cBAssignment_1; }
		
		//Browser_Task
		public RuleCall getBBrowser_TaskParserRuleCall_1_0() { return cBBrowser_TaskParserRuleCall_1_0; }
	}
	public class Browser_TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Browser_Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeleniumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBrowserKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsOperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Browser_Task:
		//	'Selenium' '{'
		//	'Browser' name=STRING
		//	operations+=Operation*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Selenium' '{' 'Browser' name=STRING operations+=Operation* '}'
		public Group getGroup() { return cGroup; }
		
		//'Selenium'
		public Keyword getSeleniumKeyword_0() { return cSeleniumKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Browser'
		public Keyword getBrowserKeyword_2() { return cBrowserKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_0() { return cOperationsOperationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cApply_AllParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStoreParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCallFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Operation:
		//	Action | Loop | Apply_All | If | Store | CallFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//Action | Loop | Apply_All | If | Store | CallFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Action
		public RuleCall getActionParserRuleCall_0() { return cActionParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//Apply_All
		public RuleCall getApply_AllParserRuleCall_2() { return cApply_AllParserRuleCall_2; }
		
		//If
		public RuleCall getIfParserRuleCall_3() { return cIfParserRuleCall_3; }
		
		//Store
		public RuleCall getStoreParserRuleCall_4() { return cStoreParserRuleCall_4; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_5() { return cCallFunctionParserRuleCall_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFillParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVerifyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Action:
		//	Click | Go | Fill | Select | Verify;
		@Override public ParserRule getRule() { return rule; }
		
		//Click | Go | Fill | Select | Verify
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Click
		public RuleCall getClickParserRuleCall_0() { return cClickParserRuleCall_0; }
		
		//Go
		public RuleCall getGoParserRuleCall_1() { return cGoParserRuleCall_1; }
		
		//Fill
		public RuleCall getFillParserRuleCall_2() { return cFillParserRuleCall_2; }
		
		//Select
		public RuleCall getSelectParserRuleCall_3() { return cSelectParserRuleCall_3; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_4() { return cVerifyParserRuleCall_4; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEltAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEltElementParserRuleCall_1_0 = (RuleCall)cEltAssignment_1.eContents().get(0);
		
		//Click:
		//	'Click' elt=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//'Click' elt=Element
		public Group getGroup() { return cGroup; }
		
		//'Click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//elt=Element
		public Assignment getEltAssignment_1() { return cEltAssignment_1; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_1_0() { return cEltElementParserRuleCall_1_0; }
	}
	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Go");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTextParserRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		
		//Go:
		//	'Go' link=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//'Go' link=Text
		public Group getGroup() { return cGroup; }
		
		//'Go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//link=Text
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }
		
		//Text
		public RuleCall getLinkTextParserRuleCall_1_0() { return cLinkTextParserRuleCall_1_0; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEltAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEltElementParserRuleCall_2_0 = (RuleCall)cEltAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFillwithAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFillwithTextParserRuleCall_4_0 = (RuleCall)cFillwithAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fill:
		//	'Fill' '(' elt=Element ',' fillwith=Text ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Fill' '(' elt=Element ',' fillwith=Text ')'
		public Group getGroup() { return cGroup; }
		
		//'Fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elt=Element
		public Assignment getEltAssignment_2() { return cEltAssignment_2; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_2_0() { return cEltElementParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//fillwith=Text
		public Assignment getFillwithAssignment_4() { return cFillwithAssignment_4; }
		
		//Text
		public RuleCall getFillwithTextParserRuleCall_4_0() { return cFillwithTextParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEltAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEltElementParserRuleCall_1_0 = (RuleCall)cEltAssignment_1.eContents().get(0);
		
		//Select:
		//	'Select' elt=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//'Select' elt=Element
		public Group getGroup() { return cGroup; }
		
		//'Select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//elt=Element
		public Assignment getEltAssignment_1() { return cEltAssignment_1; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_1_0() { return cEltElementParserRuleCall_1_0; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEltAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEltElementParserRuleCall_2_0 = (RuleCall)cEltAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFindTextParserRuleCall_4_0 = (RuleCall)cFindAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Verify:
		//	'Verify' '(' elt=Element ',' find=Text ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Verify' '(' elt=Element ',' find=Text ')'
		public Group getGroup() { return cGroup; }
		
		//'Verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elt=Element
		public Assignment getEltAssignment_2() { return cEltAssignment_2; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_2_0() { return cEltElementParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//find=Text
		public Assignment getFindAssignment_4() { return cFindAssignment_4; }
		
		//Text
		public RuleCall getFindTextParserRuleCall_4_0() { return cFindTextParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Apply_AllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Apply_All");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApply_AllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEltAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEltElementParserRuleCall_2_0 = (RuleCall)cEltAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsOperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Apply_All:
		//	'Apply_All' '(' elt=Element ',' operations+=Operation* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Apply_All' '(' elt=Element ',' operations+=Operation* ')'
		public Group getGroup() { return cGroup; }
		
		//'Apply_All'
		public Keyword getApply_AllKeyword_0() { return cApply_AllKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elt=Element
		public Assignment getEltAssignment_2() { return cEltAssignment_2; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_2_0() { return cEltElementParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_0() { return cOperationsOperationParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cAddAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddAddConditionParserRuleCall_3_0 = (RuleCall)cAddAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsOperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOperationsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_8_2_0 = (RuleCall)cOperationsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//If:
		//	'if' '(' cond=Condition add+=AddCondition* ')' '{' operations+=Operation* '}' ('else' '{' operations+=Operation*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=Condition add+=AddCondition* ')' '{' operations+=Operation* '}' ('else' '{' operations+=Operation* '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Condition
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_2_0() { return cCondConditionParserRuleCall_2_0; }
		
		//add+=AddCondition*
		public Assignment getAddAssignment_3() { return cAddAssignment_3; }
		
		//AddCondition
		public RuleCall getAddAddConditionParserRuleCall_3_0() { return cAddAddConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_6_0() { return cOperationsOperationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' '{' operations+=Operation* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_8_2() { return cOperationsAssignment_8_2; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_8_2_0() { return cOperationsOperationParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarSTRINGTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTextAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTextTextParserRuleCall_4_0_0 = (RuleCall)cTextAssignment_4_0.eContents().get(0);
		private final Assignment cEltAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEltElementParserRuleCall_4_1_0 = (RuleCall)cEltAssignment_4_1.eContents().get(0);
		
		//Store:
		//	'Store' 'Var' var=STRING "=" (text=Text | elt=Element);
		@Override public ParserRule getRule() { return rule; }
		
		//'Store' 'Var' var=STRING "=" (text=Text | elt=Element)
		public Group getGroup() { return cGroup; }
		
		//'Store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//'Var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//var=STRING
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//STRING
		public RuleCall getVarSTRINGTerminalRuleCall_2_0() { return cVarSTRINGTerminalRuleCall_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(text=Text | elt=Element)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//text=Text
		public Assignment getTextAssignment_4_0() { return cTextAssignment_4_0; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_4_0_0() { return cTextTextParserRuleCall_4_0_0; }
		
		//elt=Element
		public Assignment getEltAssignment_4_1() { return cEltAssignment_4_1; }
		
		//Element
		public RuleCall getEltElementParserRuleCall_4_1_0() { return cEltElementParserRuleCall_4_1_0; }
	}
	public class CallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsVariableParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CallFunction:
		//	'func' '(' vars+=Variable* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'func' '(' vars+=Variable* ')'
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vars+=Variable*
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_2_0() { return cVarsVariableParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVarsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVarsVariableParserRuleCall_8_0 = (RuleCall)cVarsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOperationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOperationsOperationParserRuleCall_11_0 = (RuleCall)cOperationsAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Function:
		//	'Function' '('
		//	'Name' name=STRING ','
		//	'Var' '=' '(' vars+=Variable* ')' ','
		//	operations+=Operation*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Function' '(' 'Name' name=STRING ',' 'Var' '=' '(' vars+=Variable* ')' ',' operations+=Operation* ')'
		public Group getGroup() { return cGroup; }
		
		//'Function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'Name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'Var'
		public Keyword getVarKeyword_5() { return cVarKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//vars+=Variable*
		public Assignment getVarsAssignment_8() { return cVarsAssignment_8; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_8_0() { return cVarsVariableParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_11() { return cOperationsAssignment_11; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_11_0() { return cOperationsOperationParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Loop:
		//	ForLoop | WhileLoop | DoLoop;
		@Override public ParserRule getRule() { return rule; }
		
		//ForLoop | WhileLoop | DoLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_0() { return cForLoopParserRuleCall_0; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_1() { return cWhileLoopParserRuleCall_1; }
		
		//DoLoop
		public RuleCall getDoLoopParserRuleCall_2() { return cDoLoopParserRuleCall_2; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartINTTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepINTTerminalRuleCall_6_0 = (RuleCall)cStepAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOperationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperationsOperationParserRuleCall_9_0 = (RuleCall)cOperationsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ForLoop:
		//	'For' '(' start=INT ',' end=INT ',' step=INT ')' '{' operations+=Operation* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'For' '(' start=INT ',' end=INT ',' step=INT ')' '{' operations+=Operation* '}'
		public Group getGroup() { return cGroup; }
		
		//'For'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=INT
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_2_0() { return cStartINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//end=INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//step=INT
		public Assignment getStepAssignment_6() { return cStepAssignment_6; }
		
		//INT
		public RuleCall getStepINTTerminalRuleCall_6_0() { return cStepINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_9() { return cOperationsAssignment_9; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_9_0() { return cOperationsOperationParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAddAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddAddConditionParserRuleCall_3_0 = (RuleCall)cAddAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsOperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WhileLoop:
		//	'While' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'While' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}'
		public Group getGroup() { return cGroup; }
		
		//'While'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }
		
		//add+=AddCondition*
		public Assignment getAddAssignment_3() { return cAddAssignment_3; }
		
		//AddCondition
		public RuleCall getAddAddConditionParserRuleCall_3_0() { return cAddAddConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_6_0() { return cOperationsOperationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DoLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DoLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAddAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddAddConditionParserRuleCall_3_0 = (RuleCall)cAddAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsOperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DoLoop:
		//	'DoWhile' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DoWhile' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}'
		public Group getGroup() { return cGroup; }
		
		//'DoWhile'
		public Keyword getDoWhileKeyword_0() { return cDoWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }
		
		//add+=AddCondition*
		public Assignment getAddAssignment_3() { return cAddAssignment_3; }
		
		//AddCondition
		public RuleCall getAddAddConditionParserRuleCall_3_0() { return cAddAddConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_6_0() { return cOperationsOperationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSimpleOpParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cVerifyParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Condition:
		//	'Condition' (SimpleOp | Verify | Variable);
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' (SimpleOp | Verify | Variable)
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//(SimpleOp | Verify | Variable)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SimpleOp
		public RuleCall getSimpleOpParserRuleCall_1_0() { return cSimpleOpParserRuleCall_1_0; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_1_1() { return cVerifyParserRuleCall_1_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1_2() { return cVariableParserRuleCall_1_2; }
	}
	public class AddConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AddCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		
		//AddCondition:
		//	('And' | 'Or') cond=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//('And' | 'Or') cond=Condition
		public Group getGroup() { return cGroup; }
		
		//('And' | 'Or')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'And'
		public Keyword getAndKeyword_0_0() { return cAndKeyword_0_0; }
		
		//'Or'
		public Keyword getOrKeyword_0_1() { return cOrKeyword_0_1; }
		
		//cond=Condition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Condition
		public RuleCall getCondConditionParserRuleCall_1_0() { return cCondConditionParserRuleCall_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEltTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Element:
		//	'Element' type=EltType;
		@Override public ParserRule getRule() { return rule; }
		
		//'Element' type=EltType
		public Group getGroup() { return cGroup; }
		
		//'Element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//type=EltType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EltType
		public RuleCall getTypeEltTypeParserRuleCall_1_0() { return cTypeEltTypeParserRuleCall_1_0; }
	}
	public class EltTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EltType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cURLKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EltType:
		//	Tag | 'URL' | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Tag | 'URL' | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tag
		public RuleCall getTagParserRuleCall_0() { return cTagParserRuleCall_0; }
		
		//'URL'
		public Keyword getURLKeyword_1() { return cURLKeyword_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHtmlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHtmlHTML_ELTTerminalRuleCall_1_0 = (RuleCall)cHtmlAssignment_1.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagTextParserRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tag:
		//	'{' html=HTML_ELT tag=Text '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' html=HTML_ELT tag=Text '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//html=HTML_ELT
		public Assignment getHtmlAssignment_1() { return cHtmlAssignment_1; }
		
		//HTML_ELT
		public RuleCall getHtmlHTML_ELTTerminalRuleCall_1_0() { return cHtmlHTML_ELTTerminalRuleCall_1_0; }
		
		//tag=Text
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }
		
		//Text
		public RuleCall getTagTextParserRuleCall_2_0() { return cTagTextParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SimpleOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SimpleOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElt1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElt1ComparableEltParserRuleCall_1_0 = (RuleCall)cElt1Assignment_1.eContents().get(0);
		private final RuleCall cOPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cElt2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElt2ComparableEltParserRuleCall_3_0 = (RuleCall)cElt2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SimpleOp:
		//	'(' elt1=ComparableElt OP elt2=ComparableElt ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' elt1=ComparableElt OP elt2=ComparableElt ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//elt1=ComparableElt
		public Assignment getElt1Assignment_1() { return cElt1Assignment_1; }
		
		//ComparableElt
		public RuleCall getElt1ComparableEltParserRuleCall_1_0() { return cElt1ComparableEltParserRuleCall_1_0; }
		
		//OP
		public RuleCall getOPTerminalRuleCall_2() { return cOPTerminalRuleCall_2; }
		
		//elt2=ComparableElt
		public Assignment getElt2Assignment_3() { return cElt2Assignment_3; }
		
		//ComparableElt
		public RuleCall getElt2ComparableEltParserRuleCall_3_0() { return cElt2ComparableEltParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComparableEltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComparableElt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntINTTerminalRuleCall_0_0 = (RuleCall)cIntAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//ComparableElt:
		//	int=INT | text=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//int=INT | text=Text
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int=INT
		public Assignment getIntAssignment_0() { return cIntAssignment_0; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_0_0() { return cIntINTTerminalRuleCall_0_0; }
		
		//text=Text
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_0() { return cTextTextParserRuleCall_1_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Text:
		//	var=Variable | name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variable | name=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	'Var' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Var' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final Browser_TaskElements pBrowser_Task;
	private final OperationElements pOperation;
	private final ActionElements pAction;
	private final ClickElements pClick;
	private final GoElements pGo;
	private final FillElements pFill;
	private final SelectElements pSelect;
	private final VerifyElements pVerify;
	private final Apply_AllElements pApply_All;
	private final IfElements pIf;
	private final StoreElements pStore;
	private final CallFunctionElements pCallFunction;
	private final FunctionElements pFunction;
	private final LoopElements pLoop;
	private final ForLoopElements pForLoop;
	private final WhileLoopElements pWhileLoop;
	private final DoLoopElements pDoLoop;
	private final ConditionElements pCondition;
	private final AddConditionElements pAddCondition;
	private final ElementElements pElement;
	private final EltTypeElements pEltType;
	private final TagElements pTag;
	private final SimpleOpElements pSimpleOp;
	private final ComparableEltElements pComparableElt;
	private final TextElements pText;
	private final VariableElements pVariable;
	private final TerminalRule tHTML_ELT;
	private final TerminalRule tOP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pBrowser_Task = new Browser_TaskElements();
		this.pOperation = new OperationElements();
		this.pAction = new ActionElements();
		this.pClick = new ClickElements();
		this.pGo = new GoElements();
		this.pFill = new FillElements();
		this.pSelect = new SelectElements();
		this.pVerify = new VerifyElements();
		this.pApply_All = new Apply_AllElements();
		this.pIf = new IfElements();
		this.pStore = new StoreElements();
		this.pCallFunction = new CallFunctionElements();
		this.pFunction = new FunctionElements();
		this.pLoop = new LoopElements();
		this.pForLoop = new ForLoopElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pDoLoop = new DoLoopElements();
		this.pCondition = new ConditionElements();
		this.pAddCondition = new AddConditionElements();
		this.pElement = new ElementElements();
		this.pEltType = new EltTypeElements();
		this.pTag = new TagElements();
		this.pSimpleOp = new SimpleOpElements();
		this.pComparableElt = new ComparableEltElements();
		this.pText = new TextElements();
		this.pVariable = new VariableElements();
		this.tHTML_ELT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HTML_ELT");
		this.tOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	func+=Function* b=Browser_Task;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Browser_Task:
	//	'Selenium' '{'
	//	'Browser' name=STRING
	//	operations+=Operation*
	//	'}';
	public Browser_TaskElements getBrowser_TaskAccess() {
		return pBrowser_Task;
	}
	
	public ParserRule getBrowser_TaskRule() {
		return getBrowser_TaskAccess().getRule();
	}
	
	//Operation:
	//	Action | Loop | Apply_All | If | Store | CallFunction;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Action:
	//	Click | Go | Fill | Select | Verify;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Click:
	//	'Click' elt=Element;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Go:
	//	'Go' link=Text;
	public GoElements getGoAccess() {
		return pGo;
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}
	
	//Fill:
	//	'Fill' '(' elt=Element ',' fillwith=Text ')';
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//Select:
	//	'Select' elt=Element;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Verify:
	//	'Verify' '(' elt=Element ',' find=Text ')';
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//Apply_All:
	//	'Apply_All' '(' elt=Element ',' operations+=Operation* ')';
	public Apply_AllElements getApply_AllAccess() {
		return pApply_All;
	}
	
	public ParserRule getApply_AllRule() {
		return getApply_AllAccess().getRule();
	}
	
	//If:
	//	'if' '(' cond=Condition add+=AddCondition* ')' '{' operations+=Operation* '}' ('else' '{' operations+=Operation*
	//	'}')?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Store:
	//	'Store' 'Var' var=STRING "=" (text=Text | elt=Element);
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//CallFunction:
	//	'func' '(' vars+=Variable* ')';
	public CallFunctionElements getCallFunctionAccess() {
		return pCallFunction;
	}
	
	public ParserRule getCallFunctionRule() {
		return getCallFunctionAccess().getRule();
	}
	
	//Function:
	//	'Function' '('
	//	'Name' name=STRING ','
	//	'Var' '=' '(' vars+=Variable* ')' ','
	//	operations+=Operation*
	//	')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Loop:
	//	ForLoop | WhileLoop | DoLoop;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//ForLoop:
	//	'For' '(' start=INT ',' end=INT ',' step=INT ')' '{' operations+=Operation* '}';
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//WhileLoop:
	//	'While' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//DoLoop:
	//	'DoWhile' '(' Condition add+=AddCondition* ')' '{' operations+=Operation* '}';
	public DoLoopElements getDoLoopAccess() {
		return pDoLoop;
	}
	
	public ParserRule getDoLoopRule() {
		return getDoLoopAccess().getRule();
	}
	
	//Condition:
	//	'Condition' (SimpleOp | Verify | Variable);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//AddCondition:
	//	('And' | 'Or') cond=Condition;
	public AddConditionElements getAddConditionAccess() {
		return pAddCondition;
	}
	
	public ParserRule getAddConditionRule() {
		return getAddConditionAccess().getRule();
	}
	
	//Element:
	//	'Element' type=EltType;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//EltType:
	//	Tag | 'URL' | Variable;
	public EltTypeElements getEltTypeAccess() {
		return pEltType;
	}
	
	public ParserRule getEltTypeRule() {
		return getEltTypeAccess().getRule();
	}
	
	//Tag:
	//	'{' html=HTML_ELT tag=Text '}';
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//SimpleOp:
	//	'(' elt1=ComparableElt OP elt2=ComparableElt ')';
	public SimpleOpElements getSimpleOpAccess() {
		return pSimpleOp;
	}
	
	public ParserRule getSimpleOpRule() {
		return getSimpleOpAccess().getRule();
	}
	
	//ComparableElt:
	//	int=INT | text=Text;
	public ComparableEltElements getComparableEltAccess() {
		return pComparableElt;
	}
	
	public ParserRule getComparableEltRule() {
		return getComparableEltAccess().getRule();
	}
	
	//Text:
	//	var=Variable | name=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Variable:
	//	'Var' name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//terminal HTML_ELT:
	//	'id' | 'class' | 'tagName' | 'name' | 'linkText' | 'partialLinkText';
	public TerminalRule getHTML_ELTRule() {
		return tHTML_ELT;
	}
	
	//terminal OP:
	//	'<' | '>' | '!=' | '==';
	public TerminalRule getOPRule() {
		return tOP;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
