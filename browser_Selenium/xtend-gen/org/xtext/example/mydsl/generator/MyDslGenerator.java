/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.Apply_All;
import org.xtext.example.mydsl.myDsl.Browser_Task;
import org.xtext.example.mydsl.myDsl.CallFunction;
import org.xtext.example.mydsl.myDsl.Click;
import org.xtext.example.mydsl.myDsl.Element;
import org.xtext.example.mydsl.myDsl.EltType;
import org.xtext.example.mydsl.myDsl.Fill;
import org.xtext.example.mydsl.myDsl.Function;
import org.xtext.example.mydsl.myDsl.Go;
import org.xtext.example.mydsl.myDsl.If;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.Operation;
import org.xtext.example.mydsl.myDsl.Program;
import org.xtext.example.mydsl.myDsl.Select;
import org.xtext.example.mydsl.myDsl.Store;
import org.xtext.example.mydsl.myDsl.Tag;
import org.xtext.example.mydsl.myDsl.Text;
import org.xtext.example.mydsl.myDsl.Variable;
import org.xtext.example.mydsl.myDsl.Verify;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Program program = ((Program) _head);
    CharSequence _genProgram = this.genProgram(program);
    fsa.generateFile("TestInternal.java", _genProgram);
  }
  
  public CharSequence genProgram(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Function> _func = p.getFunc();
      for(final Function e : _func) {
        _builder.append("public void ");
        String _name = e.getName();
        _builder.append(_name, "");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("//func");
        EList<Function> _func_1 = p.getFunc();
        int _indexOf = _func_1.indexOf(e);
        _builder.append(_indexOf, "");
        _builder.append(".setName(\"");
        String _name_1 = e.getName();
        _builder.append(_name_1, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("//func");
        EList<Function> _func_2 = p.getFunc();
        int _indexOf_1 = _func_2.indexOf(e);
        _builder.append(_indexOf_1, "");
        _builder.append(".setVars(");
        EList<Variable> _vars = e.getVars();
        _builder.append(_vars, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("//func");
        EList<Function> _func_3 = p.getFunc();
        int _indexOf_2 = _func_3.indexOf(e);
        _builder.append(_indexOf_2, "");
        _builder.append(".setOperations(");
        EList<Operation> _operations = e.getOperations();
        _builder.append(_operations, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("//program.addFunction(func");
        EList<Function> _func_4 = p.getFunc();
        int _indexOf_3 = _func_4.indexOf(e);
        _builder.append(_indexOf_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("public class TestInternal {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Start building the program\");");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _genCore = this.genCore(p);
    _builder.append(_genCore, "\t\t");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Finish building the program\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("WebDriver driver=new  ChromeDriver();");
    _builder.newLine();
    _builder.append("driver.get(\"https://www.google.com\");");
    _builder.newLine();
    _builder.append("//Selenium selenium = new DefaultSelenium(\"localhost\"\", 4444, \"\"*firefox\"\", \"http://www.google.com\");");
    _builder.newLine();
    {
      Browser_Task _b = p.getB();
      EList<Operation> _operations = _b.getOperations();
      for(final Operation e : _operations) {
        {
          if ((e instanceof Action)) {
            _builder.append("            ");
            Browser_Task _b_1 = p.getB();
            EList<Operation> _operations_1 = _b_1.getOperations();
            int _indexOf = _operations_1.indexOf(e);
            CharSequence _genCore = this.genCore(((Action)e), _indexOf);
            _builder.append(_genCore, "            ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e instanceof Loop)) {
            _builder.append("            ");
            CharSequence _genCore_1 = this.genCore(((Loop)e));
            _builder.append(_genCore_1, "            ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e instanceof Apply_All)) {
            _builder.append("            ");
            _builder.append("//Apply_All applyall");
            Browser_Task _b_2 = p.getB();
            EList<Operation> _operations_2 = _b_2.getOperations();
            int _indexOf_1 = _operations_2.indexOf(e);
            _builder.append(_indexOf_1, "            ");
            _builder.append(" = new Apply_All();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e instanceof If)) {
            _builder.append("            ");
            _builder.append("//If if");
            Browser_Task _b_3 = p.getB();
            EList<Operation> _operations_3 = _b_3.getOperations();
            int _indexOf_2 = _operations_3.indexOf(e);
            _builder.append(_indexOf_2, "            ");
            _builder.append(" = new If();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e instanceof Store)) {
            _builder.append("            ");
            _builder.append("//Store store");
            Browser_Task _b_4 = p.getB();
            EList<Operation> _operations_4 = _b_4.getOperations();
            int _indexOf_3 = _operations_4.indexOf(e);
            _builder.append(_indexOf_3, "            ");
            _builder.append(" = new Store();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e instanceof CallFunction)) {
            _builder.append("            ");
            _builder.append("//CallFunction callfunc");
            Browser_Task _b_5 = p.getB();
            EList<Operation> _operations_5 = _b_5.getOperations();
            int _indexOf_4 = _operations_5.indexOf(e);
            _builder.append(_indexOf_4, "            ");
            _builder.append(" = new CallFunction();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("            ");
    _builder.append("driver.quit();");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Action a, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((a instanceof Click)) {
        _builder.append("WebElement element_");
        _builder.append(i, "");
        _builder.append(" = ");
        Element _elt = ((Click)a).getElt();
        EltType _type = _elt.getType();
        CharSequence _genCore = this.genCore(_type);
        _builder.append(_genCore, "");
        _builder.newLineIfNotEmpty();
        _builder.append("element_");
        _builder.append(i, "");
        _builder.append(".click();");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Go)) {
        _builder.append("driver.get(\"");
        Text _link = ((Go)a).getLink();
        String _name = _link.getName();
        _builder.append(_name, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Fill)) {
        _builder.append("        ");
        _builder.append("WebElement element_");
        _builder.append(i, "        ");
        _builder.append(" = ");
        Element _elt_1 = ((Fill)a).getElt();
        EltType _type_1 = _elt_1.getType();
        CharSequence _genCore_1 = this.genCore(_type_1);
        _builder.append(_genCore_1, "        ");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("element_");
        _builder.append(i, "        ");
        _builder.append(".sendKeys(\"");
        Text _fillwith = ((Fill)a).getFillwith();
        String _name_1 = _fillwith.getName();
        _builder.append(_name_1, "        ");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("element_");
        _builder.append(i, "        ");
        _builder.append(".submit();");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    {
      if ((a instanceof Select)) {
        _builder.append("        \t");
        _builder.append("WebElement element_");
        _builder.append(i, "        \t");
        _builder.append(" = ");
        Element _elt_2 = ((Select)a).getElt();
        EltType _type_2 = _elt_2.getType();
        CharSequence _genCore_2 = this.genCore(_type_2);
        _builder.append(_genCore_2, "        \t");
        _builder.newLineIfNotEmpty();
        _builder.append("element_");
        _builder.append(i, "");
        _builder.append(".click();");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Verify)) {
        _builder.append("        \t");
        _builder.append("WebElement element_");
        _builder.append(i, "        \t");
        _builder.append(" = ");
        Element _elt_3 = ((Verify)a).getElt();
        EltType _type_3 = _elt_3.getType();
        CharSequence _genCore_3 = this.genCore(_type_3);
        _builder.append(_genCore_3, "        \t");
        _builder.newLineIfNotEmpty();
        _builder.append("String message_");
        _builder.append(i, "");
        _builder.append(" = element_");
        _builder.append(i, "");
        _builder.append(".getText();");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(message_");
        _builder.append(i, "");
        _builder.append(".contains(\"");
        Text _find = ((Verify)a).getFind();
        String _name_2 = _find.getName();
        _builder.append(_name_2, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final EltType e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof Tag)) {
        _builder.append("driver.findElement(By.");
        String _html = ((Tag)e).getHtml();
        _builder.append(_html, "");
        _builder.append("(\"");
        Text _tag = ((Tag)e).getTag();
        String _name = _tag.getName();
        _builder.append(_name, "");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((e instanceof Variable)) {
        String _name_1 = ((Variable)e).getName();
        _builder.append(_name_1, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _equals = Objects.equal(e, "URL");
      if (_equals) {
        _builder.append("// TODO URL");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence genCore(final Loop a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
