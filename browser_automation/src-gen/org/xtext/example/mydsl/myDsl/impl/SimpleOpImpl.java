/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.ComparableElt;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SimpleOp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Op</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleOpImpl#getElt1 <em>Elt1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SimpleOpImpl#getElt2 <em>Elt2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleOpImpl extends ConditionImpl implements SimpleOp
{
  /**
   * The cached value of the '{@link #getElt1() <em>Elt1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElt1()
   * @generated
   * @ordered
   */
  protected ComparableElt elt1;

  /**
   * The cached value of the '{@link #getElt2() <em>Elt2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElt2()
   * @generated
   * @ordered
   */
  protected ComparableElt elt2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleOpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SIMPLE_OP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparableElt getElt1()
  {
    return elt1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElt1(ComparableElt newElt1, NotificationChain msgs)
  {
    ComparableElt oldElt1 = elt1;
    elt1 = newElt1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_OP__ELT1, oldElt1, newElt1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElt1(ComparableElt newElt1)
  {
    if (newElt1 != elt1)
    {
      NotificationChain msgs = null;
      if (elt1 != null)
        msgs = ((InternalEObject)elt1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_OP__ELT1, null, msgs);
      if (newElt1 != null)
        msgs = ((InternalEObject)newElt1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_OP__ELT1, null, msgs);
      msgs = basicSetElt1(newElt1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_OP__ELT1, newElt1, newElt1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparableElt getElt2()
  {
    return elt2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElt2(ComparableElt newElt2, NotificationChain msgs)
  {
    ComparableElt oldElt2 = elt2;
    elt2 = newElt2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_OP__ELT2, oldElt2, newElt2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElt2(ComparableElt newElt2)
  {
    if (newElt2 != elt2)
    {
      NotificationChain msgs = null;
      if (elt2 != null)
        msgs = ((InternalEObject)elt2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_OP__ELT2, null, msgs);
      if (newElt2 != null)
        msgs = ((InternalEObject)newElt2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SIMPLE_OP__ELT2, null, msgs);
      msgs = basicSetElt2(newElt2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SIMPLE_OP__ELT2, newElt2, newElt2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_OP__ELT1:
        return basicSetElt1(null, msgs);
      case MyDslPackage.SIMPLE_OP__ELT2:
        return basicSetElt2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_OP__ELT1:
        return getElt1();
      case MyDslPackage.SIMPLE_OP__ELT2:
        return getElt2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_OP__ELT1:
        setElt1((ComparableElt)newValue);
        return;
      case MyDslPackage.SIMPLE_OP__ELT2:
        setElt2((ComparableElt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_OP__ELT1:
        setElt1((ComparableElt)null);
        return;
      case MyDslPackage.SIMPLE_OP__ELT2:
        setElt2((ComparableElt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SIMPLE_OP__ELT1:
        return elt1 != null;
      case MyDslPackage.SIMPLE_OP__ELT2:
        return elt2 != null;
    }
    return super.eIsSet(featureID);
  }

} //SimpleOpImpl
