/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.Apply_All;
import org.xtext.example.mydsl.myDsl.Browser_Task;
import org.xtext.example.mydsl.myDsl.CallFunction;
import org.xtext.example.mydsl.myDsl.Click;
import org.xtext.example.mydsl.myDsl.Element;
import org.xtext.example.mydsl.myDsl.Fill;
import org.xtext.example.mydsl.myDsl.FindIf;
import org.xtext.example.mydsl.myDsl.Function;
import org.xtext.example.mydsl.myDsl.Go;
import org.xtext.example.mydsl.myDsl.If;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.Operation;
import org.xtext.example.mydsl.myDsl.Program;
import org.xtext.example.mydsl.myDsl.Select;
import org.xtext.example.mydsl.myDsl.Store;
import org.xtext.example.mydsl.myDsl.Tag;
import org.xtext.example.mydsl.myDsl.Text;
import org.xtext.example.mydsl.myDsl.Variable;
import org.xtext.example.mydsl.myDsl.Verify;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Program program = ((Program) _head);
    CharSequence _genProgram = this.genProgram(program);
    fsa.generateFile("browser_automation\\internal\\TestInternal.java", _genProgram);
  }
  
  public CharSequence genProgram(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package browser_automation.internal;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import browser_automation.Program;");
    _builder.newLine();
    _builder.append("import browser_automation.OP;");
    _builder.newLine();
    _builder.append("import browser_automation.HTML_ELT;");
    _builder.newLine();
    _builder.append("import browser_automation.Variable;");
    _builder.newLine();
    _builder.append("import browser_automation.Text;");
    _builder.newLine();
    _builder.append("import browser_automation.ComparableElt;");
    _builder.newLine();
    _builder.append("import browser_automation.SimpleOp;");
    _builder.newLine();
    _builder.append("import browser_automation.Tag;");
    _builder.newLine();
    _builder.append("import browser_automation.Element;");
    _builder.newLine();
    _builder.append("import browser_automation.FindIf;");
    _builder.newLine();
    _builder.append("import browser_automation.AddCondition;");
    _builder.newLine();
    _builder.append("import browser_automation.Condition;");
    _builder.newLine();
    _builder.append("import browser_automation.DoLoop;");
    _builder.newLine();
    _builder.append("import browser_automation.WhileLoop;");
    _builder.newLine();
    _builder.append("import browser_automation.ForLoop;");
    _builder.newLine();
    _builder.append("import browser_automation.Loop;");
    _builder.newLine();
    _builder.append("import browser_automation.Function;");
    _builder.newLine();
    _builder.append("import browser_automation.CallFunction;");
    _builder.newLine();
    _builder.append("import browser_automation.Store;");
    _builder.newLine();
    _builder.append("import browser_automation.If;");
    _builder.newLine();
    _builder.append("import browser_automation.Apply_All;");
    _builder.newLine();
    _builder.append("import browser_automation.Verify;");
    _builder.newLine();
    _builder.append("import browser_automation.Select;");
    _builder.newLine();
    _builder.append("import browser_automation.Fill;");
    _builder.newLine();
    _builder.append("import browser_automation.Go;");
    _builder.newLine();
    _builder.append("import browser_automation.Click;");
    _builder.newLine();
    _builder.append("import browser_automation.Action;");
    _builder.newLine();
    _builder.append("import browser_automation.Operation;");
    _builder.newLine();
    _builder.append("import browser_automation.Browser_Task;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TestInternal {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Start building the program\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("buildProgram();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Finish building the program\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _genCore = this.genCore(p);
    _builder.append(_genCore, "\t");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private static  Program buildProgram() {");
    _builder.newLine();
    _builder.append("//creating a Program");
    _builder.newLine();
    _builder.append("Program program = new Program();");
    _builder.newLine();
    _builder.append("//creating functions");
    _builder.newLine();
    {
      EList<Function> _func = p.getFunc();
      for(final Function e : _func) {
        _builder.append("Function func");
        EList<Function> _func_1 = p.getFunc();
        int _indexOf = _func_1.indexOf(e);
        _builder.append(_indexOf, "");
        _builder.append(" = new Function();");
        _builder.newLineIfNotEmpty();
        _builder.append("func");
        EList<Function> _func_2 = p.getFunc();
        int _indexOf_1 = _func_2.indexOf(e);
        _builder.append(_indexOf_1, "");
        _builder.append(".setName(\"");
        String _name = e.getName();
        _builder.append(_name, "");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("func");
        EList<Function> _func_3 = p.getFunc();
        int _indexOf_2 = _func_3.indexOf(e);
        _builder.append(_indexOf_2, "");
        _builder.append(".setVars(");
        EList<Variable> _vars = e.getVars();
        _builder.append(_vars, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("func");
        EList<Function> _func_4 = p.getFunc();
        int _indexOf_3 = _func_4.indexOf(e);
        _builder.append(_indexOf_3, "");
        _builder.append(".setOperations(");
        EList<Operation> _operations = e.getOperations();
        _builder.append(_operations, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("program.addFunction(func");
        EList<Function> _func_5 = p.getFunc();
        int _indexOf_4 = _func_5.indexOf(e);
        _builder.append(_indexOf_4, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("            ");
    _builder.append("BrowserTask browser_task = new BrowserTask();");
    _builder.newLine();
    _builder.append("browser_task.setName(\"");
    Browser_Task _b = p.getB();
    String _name_1 = _b.getName();
    _builder.append(_name_1, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      Browser_Task _b_1 = p.getB();
      EList<Operation> _operations_1 = _b_1.getOperations();
      for(final Operation e_1 : _operations_1) {
        {
          if ((e_1 instanceof Action)) {
            _builder.append("            ");
            _builder.append("//Action action");
            Browser_Task _b_2 = p.getB();
            EList<Operation> _operations_2 = _b_2.getOperations();
            int _indexOf_5 = _operations_2.indexOf(e_1);
            _builder.append(_indexOf_5, "            ");
            _builder.append(" = new Action();");
            _builder.newLineIfNotEmpty();
            _builder.append("            ");
            CharSequence _genCore = this.genCore(((Action)e_1));
            _builder.append(_genCore, "            ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e_1 instanceof Loop)) {
            _builder.append("            ");
            _builder.append("//Loop loop");
            Browser_Task _b_3 = p.getB();
            EList<Operation> _operations_3 = _b_3.getOperations();
            int _indexOf_6 = _operations_3.indexOf(e_1);
            _builder.append(_indexOf_6, "            ");
            _builder.append(" = new Loop();");
            _builder.newLineIfNotEmpty();
            _builder.append("            ");
            CharSequence _genCore_1 = this.genCore(((Loop)e_1));
            _builder.append(_genCore_1, "            ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e_1 instanceof Apply_All)) {
            _builder.append("            ");
            _builder.append("//Apply_All applyall");
            Browser_Task _b_4 = p.getB();
            EList<Operation> _operations_4 = _b_4.getOperations();
            int _indexOf_7 = _operations_4.indexOf(e_1);
            _builder.append(_indexOf_7, "            ");
            _builder.append(" = new Apply_All();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e_1 instanceof If)) {
            _builder.append("            ");
            _builder.append("//If if");
            Browser_Task _b_5 = p.getB();
            EList<Operation> _operations_5 = _b_5.getOperations();
            int _indexOf_8 = _operations_5.indexOf(e_1);
            _builder.append(_indexOf_8, "            ");
            _builder.append(" = new If();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e_1 instanceof Store)) {
            _builder.append("            ");
            _builder.append("//Store store");
            Browser_Task _b_6 = p.getB();
            EList<Operation> _operations_6 = _b_6.getOperations();
            int _indexOf_9 = _operations_6.indexOf(e_1);
            _builder.append(_indexOf_9, "            ");
            _builder.append(" = new Store();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((e_1 instanceof CallFunction)) {
            _builder.append("            ");
            _builder.append("//CallFunction callfunc");
            Browser_Task _b_7 = p.getB();
            EList<Operation> _operations_7 = _b_7.getOperations();
            int _indexOf_10 = _operations_7.indexOf(e_1);
            _builder.append(_indexOf_10, "            ");
            _builder.append(" = new CallFunction();");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("program.addProgram(browser_task);");
    _builder.newLine();
    _builder.append("System.out.println(program);");
    _builder.newLine();
    _builder.append("return program;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Action a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((a instanceof Click)) {
        _builder.append("Click click = new Click();");
        _builder.newLine();
        Element _elt = ((Click)a).getElt();
        CharSequence _genCore = this.genCore(_elt);
        _builder.append(_genCore, "");
        _builder.newLineIfNotEmpty();
        _builder.append("click.setElt(");
        Element _elt_1 = ((Click)a).getElt();
        _builder.append(_elt_1, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Go)) {
        _builder.append("Go go = new Go();");
        _builder.newLine();
        _builder.append("go.setLink(");
        Text _link = ((Go)a).getLink();
        _builder.append(_link, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Fill)) {
        _builder.append("Fill fill = new Fill();");
        _builder.newLine();
        _builder.append("fill.setElt(");
        Element _elt_2 = ((Fill)a).getElt();
        _builder.append(_elt_2, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("fill.setFillwith(");
        Text _fillwith = ((Fill)a).getFillwith();
        _builder.append(_fillwith, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Select)) {
        _builder.append("Select select = new Select();");
        _builder.newLine();
        _builder.append("select.setElt(");
        Element _elt_3 = ((Select)a).getElt();
        _builder.append(_elt_3, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof FindIf)) {
        _builder.append("FindIf findif = new FindIf();");
        _builder.newLine();
        _builder.append("findif.setElt(");
        Element _elt_4 = ((FindIf)a).getElt();
        _builder.append(_elt_4, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("findif.setText(");
        Text _text = ((FindIf)a).getText();
        _builder.append(_text, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((a instanceof Verify)) {
        _builder.append("FindIf findif = new FindIf();");
        _builder.newLine();
        _builder.append("findif.setElt(");
        Element _elt_5 = ((Verify)a).getElt();
        _builder.append(_elt_5, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("findif.setHtml_func(");
        Text _html_func = ((Verify)a).getHtml_func();
        _builder.append(_html_func, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Loop a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCore(final Element e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Element elt = new Element();");
    _builder.newLine();
    {
      boolean _equals = Objects.equal(e, "URL");
      if (_equals) {
        _builder.append("elt.setType(\"URL\");");
        _builder.newLine();
      }
    }
    {
      if ((e instanceof Tag)) {
        _builder.append("elt.setType(\"Tag\");");
        _builder.newLine();
      }
    }
    {
      if ((e instanceof Variable)) {
      }
    }
    return _builder;
  }
}
